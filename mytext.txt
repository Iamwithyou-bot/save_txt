import numpy as np, trimesh, pyrender, imageio
from pathlib import Path

DATASET = "myObject"
root = Path(__file__).resolve().parent
ply   = root / "gigaPose_datasets" / "datasets" / DATASET / "models" / "obj_000001.ply"
poses = root / "gigaPose_datasets" / "datasets" / "templates" / DATASET / "object_poses" / "000001.npy"
out   = (root / "tmp" / "cnos_templates" / DATASET); out.mkdir(parents=True, exist_ok=True)

# --- Laden ---
mesh_tm = trimesh.load(ply, force='mesh')
mesh_pr = pyrender.Mesh.from_trimesh(mesh_tm, smooth=False)

# Backface-Culling aus (wichtig falls Normals/Orientierung „komisch“)
for prim in mesh_pr.primitives:
    prim.cull_face = None

# Dunkler Hintergrund, starke Beleuchtung
scene = pyrender.Scene(bg_color=[30,30,30,255], ambient_light=[0.2,0.2,0.2,1.0])
scene.add(mesh_pr)

w = h = 512
fx = fy = 900.0
cx = w/2; cy = h/2
cam = pyrender.IntrinsicsCamera(fx, fy, cx, cy, znear=0.01, zfar=10_000.0)
renderer = pyrender.OffscreenRenderer(w, h)
light = pyrender.DirectionalLight(intensity=5.0)

# Extrinsics laden (object -> camera, OpenCV-Konvention)
T_co = np.load(poses)  # (N,4,4)

# OpenCV -> OpenGL Achsumklappung (x, y, z) -> (x, -y, -z)
C = np.diag([1, -1, -1, 1])

saved = 0
dbg_written = False
for i, T in enumerate(T_co):
    # Kamera-Pose in Welt (Welt = Objektkoords): T_cw = inv(T_co)
    T_cw_cv  = np.linalg.inv(T)
    # nach OpenGL konvertieren (Pose gilt in PyRender als camera->world)
    T_cw_gl  = T_cw_cv @ C

    cn = scene.add(cam,   pose=T_cw_gl)
    ln = scene.add(light, pose=T_cw_gl)
    color, depth = renderer.render(scene)

    # einfache Sichtbarkeitsprüfung (nicht-Background-Pixel)
    if not dbg_written:
        # Depth normalisiert speichern (nur 1x zur Kontrolle)
        d = depth.copy()
        finite = np.isfinite(d)
        if finite.any():
            dmin, dmax = d[finite].min(), d[finite].max()
            dn = np.zeros_like(d, dtype=np.float32)
            if dmax > dmin:
                dn[finite] = (d[finite]-dmin)/(dmax-dmin)
            imageio.v2.imwrite(out / f"_debug_depth.png", (255*(1.0-dn)).astype(np.uint8))
        imageio.v2.imwrite(out / f"_debug_color.png", color)
        dbg_written = True

    imageio.v2.imwrite(out / f"tpl_{i:03d}.png", color)
    scene.remove_node(cn); scene.remove_node(ln)
    saved += 1

print(f"Saved {saved} templates to {out}")
